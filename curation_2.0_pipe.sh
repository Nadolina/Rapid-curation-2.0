#!/bin/sh 

Help()
{
    # Display help

    printf "\nCommand: sh curation_2.0_pipe.sh -f <original fasta> -a <agp> <options>\n\n"
    echo "-h Prints help."
    echo "-f Pass original fasta file with combined haplotypes."
    echo "-a Pass the agp generated by PretextView."
    echo "-p Pass the primary assembly you curated (1 for haplotype 1 (default), 2 for haplotype 2)."
    printf "\n"
}

fasta=""
agpfile=""
hap=""

while getopts ":hf:a:p:" option; do
    case $option in 
        h) #display Help
            Help
            exit;;
        f) #Pass original fasta file 
            fasta=$OPTARG;;
        a) #Pass Pretext generated AGP file of curated assembly
            agpfile=$OPTARG;;
        p) #Pass haplotype of interest ()
            hap="$OPTARG";;
    esac
done

## Programs/tools
use_gfastats=/vggpfs/fs3/vgl/store/nbrajuka/gfastats/build/bin/gfastats
use_seqkit=/vggpfs/fs3/vgl/store/nbrajuka/conda/envs/statistics/bin/seqkit
use_vsearch=/vggpfs/fs3/vgl/store/nbrajuka/conda/envs/curation/bin/vsearch
printf "Dependecies:\n"
printf "Biopython v1.81\n"
$use_gfastats -v

printf "\nOriginal assembly: ${fasta}" ### but checks/breakpoints for if these aren't provided.
printf "\nPretextView generated AGP: ${agpfile}\n\n"

python3 AGPcorrect.py ${fasta} ${agpfile}

if [ ${hap} -eq 1 ]
then 
    printf "\nSplitting haplotype ${hap} from corrected.agp.\n\n"

    echo "grep -E '#|Painted|proximity_ligation|H1' corrected.agp > hap.agp"
    grep -E '#|Painted|proximity_ligation|H1' corrected.agp > hap.agp 

    python3 unloc.py
elif [ ${hap} -eq 2 ]
then
    printf "\nSplitting haplotype ${hap} from corrected.agp.\n\n"

    echo "grep -E '#|Painted|proximity_ligation|H2' corrected.agp > hap.agp"
    grep -E '#|Painted|proximity_ligation|H2' corrected.agp > hap.agp 

    python3 unloc.py
fi

echo "${use_gfastats} $fasta --agp-to-path hap.agp -o hap.fa"
${use_gfastats} $fasta --agp-to-path hap.unlocs.no_hapdups.agp -ofa | \
   ${use_seqkit} sort -lr -o hap.sorted.fa 

python3 chromosome_assignment.py 

